diff -uprN a/wpa_supplicant/wpa_supplicant.c b/wpa_supplicant/wpa_supplicant.c
--- a/wpa_supplicant/wpa_supplicant.c	2023-08-23 13:52:10.365027503 +0800
+++ b/wpa_supplicant/wpa_supplicant.c	2023-09-19 11:32:45.800931192 +0800
@@ -130,55 +130,6 @@ static void wpas_update_fils_connect_par
 static void wpas_update_owe_connect_params(struct wpa_supplicant *wpa_s);
 #endif /* CONFIG_OWE */
 
-static int hostapd_stop(struct wpa_supplicant *wpa_s)
-{
-	const char *cmd = "STOP_AP";
-	char buf[256];
-	size_t len = sizeof(buf);
-
-	if (wpa_ctrl_request(wpa_s->hostapd, cmd, os_strlen(cmd), buf, &len, NULL) < 0) {
-		wpa_printf(MSG_ERROR, "\nFailed to stop hostapd AP interfaces\n");
-		return -1;
-	}
-	return 0;
-}
-
-static int hostapd_reload(struct wpa_supplicant *wpa_s, struct wpa_bss *bss)
-{
-	char *cmd = NULL;
-	char buf[256];
-	size_t len = sizeof(buf);
-	enum hostapd_hw_mode hw_mode;
-	u8 channel;
-	int sec_chan = 0;
-	int ret;
-
-	if (!bss)
-		return -1;
-
-	if (bss->ht_param & HT_INFO_HT_PARAM_STA_CHNL_WIDTH) {
-		int sec = bss->ht_param & HT_INFO_HT_PARAM_SECONDARY_CHNL_OFF_MASK;
-		if (sec == HT_INFO_HT_PARAM_SECONDARY_CHNL_ABOVE)
-			sec_chan = 1;
-		else if (sec ==  HT_INFO_HT_PARAM_SECONDARY_CHNL_BELOW)
-			sec_chan = -1;
-	}
-
-	hw_mode = ieee80211_freq_to_chan(bss->freq, &channel);
-	if (asprintf(&cmd, "UPDATE channel=%d sec_chan=%d hw_mode=%d",
-		     channel, sec_chan, hw_mode) < 0)
-		return -1;
-
-	ret = wpa_ctrl_request(wpa_s->hostapd, cmd, os_strlen(cmd), buf, &len, NULL);
-	free(cmd);
-
-	if (ret < 0) {
-		wpa_printf(MSG_ERROR, "\nFailed to reload hostapd AP interfaces\n");
-		return -1;
-	}
-	return 0;
-}
-
 #ifdef CONFIG_WEP
 /* Configure default/group WEP keys for static WEP */
 int wpa_set_wep_keys(struct wpa_supplicant *wpa_s, struct wpa_ssid *ssid)
@@ -1063,8 +1014,6 @@ void wpa_supplicant_set_state(struct wpa
 
 		sme_sched_obss_scan(wpa_s, 1);
 
-		if (wpa_s->hostapd)
-			hostapd_reload(wpa_s, wpa_s->current_bss);
 #if defined(CONFIG_FILS) && defined(IEEE8021X_EAPOL)
 		if (!fils_hlp_sent && ssid && ssid->eap.erp)
 			update_fils_connect_params = true;
@@ -1075,8 +1024,6 @@ void wpa_supplicant_set_state(struct wpa
 #endif /* CONFIG_OWE */
 	} else if (state == WPA_DISCONNECTED || state == WPA_ASSOCIATING ||
 		   state == WPA_ASSOCIATED) {
-		if (wpa_s->hostapd)
-			hostapd_stop(wpa_s);
 		wpa_s->new_connection = 1;
 		wpa_drv_set_operstate(wpa_s, 0);
 #ifndef IEEE8021X_EAPOL
@@ -2360,8 +2307,6 @@ void wpa_supplicant_associate(struct wpa
 			return;
 		}
 		wpa_s->current_bss = bss;
-		if (wpa_s->hostapd)
-			hostapd_reload(wpa_s, wpa_s->current_bss);
 #else /* CONFIG_MESH */
 		wpa_msg(wpa_s, MSG_ERROR,
 			"mesh mode support not included in the build");
@@ -6712,16 +6657,6 @@ static int wpa_supplicant_init_iface(str
 			   sizeof(wpa_s->bridge_ifname));
 	}
 
-	if (iface->hostapd_ctrl) {
-		wpa_s->hostapd = wpa_ctrl_open(iface->hostapd_ctrl);
-		if (!wpa_s->hostapd) {
-			wpa_printf(MSG_ERROR, "\nFailed to connect to hostapd\n");
-			return -1;
-		}
-		if (hostapd_stop(wpa_s) < 0)
-			return -1;
-	}
-
 	/* RSNA Supplicant Key Management - INITIALIZE */
 	eapol_sm_notify_portEnabled(wpa_s->eapol, false);
 	eapol_sm_notify_portValid(wpa_s->eapol, false);
@@ -7059,11 +6994,6 @@ static void wpa_supplicant_deinit_iface(
 	if (terminate)
 		wpa_msg(wpa_s, MSG_INFO, WPA_EVENT_TERMINATING);
 
-	if (wpa_s->hostapd) {
-		wpa_ctrl_close(wpa_s->hostapd);
-		wpa_s->hostapd = NULL;
-	}
-
 	wpa_supplicant_ctrl_iface_deinit(wpa_s, wpa_s->ctrl_iface);
 	wpa_s->ctrl_iface = NULL;
 
