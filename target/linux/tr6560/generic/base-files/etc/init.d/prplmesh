#!/bin/sh /etc/rc.common

. /lib/functions/system.sh

START=99
NAME=prplmesh

#use the value of CONFIG_CONTROLLER_ROOT_DM if set to bind prplmesh datamodel with external proxy (tr181-device plugin)
#the value is not empty if it is something else than the default one : Device.WiFi.DataElements.

DEFAULT_CONTROLLER_ROOT_DM="Device.WiFi.DataElements"
CONFIG_CONTROLLER_ROOT_DM="Device.WiFi.DataElements"

#####################################
# Helper functions for wlan ready
#####################################

hostapd_ready()
{
        hostapd_cli -i$1 stat &>/dev/null || ubus call WiFi.Radio _get '{"depth":"0"}' &> /dev/null
}

wlan_reset()
{
        wifi down
        sleep 5
        local leftover_processes="$(ps | grep '[h]ostapd\|[s]upp')"
        if [ -n "$leftover_processes" ]; then
                logger -t "${NAME}" -p daemon.warn "Wlan procceses still running after wifi down: $leftover_processes"
                echo "Wlan procceses still running after wifi down: $leftover_processes"
                # STA interfaces/processes sometimes not closed properly (https://jira.prplfoundation.org/browse/PPM-1778)
                # This issue was spotted after wifi driver release update UGW8.5.2 in prplos.
                # Currently just log this event and continue.
                # In case wlan will not recover wlan_ready() will handle it.
        fi   
        wifi up
}

wlan_ready()
{
        for iface; do
                if ! hostapd_ready "$iface"; then
                        logger -t "${NAME}" -p daemon.warn "$0: wlan $iface not ready"
                        return 1
                fi
        done
}

get_hostap_iface() 
{
        local radio="$1"
        uci get "prplmesh.$radio.hostap_iface"
}

wlan_ready_poll()
{
        local delay=${1-3}
        local timeout=60

        # load the prplmesh config to be able to get the radio iface:
        config_load prplmesh
        ifaces="$(config_foreach get_hostap_iface wifi-device)"

        start_time="$(date -u +%s)"
        while true ; do
                if wlan_ready $ifaces; then
                        break
                fi

                end_time="$(date -u +%s)"
                elapsed="$(($end_time-$start_time))"
                if [ "$elapsed" -gt "$timeout" ]; then
                        return 1
                fi

                sleep $delay
        done
}

show_wireless_radio_disabled() 
{
        local radio="$1"
        config_get disabled $radio disabled
        if [ "$disabled" -eq 0 ]; then
                echo "$radio is enabled"
        else
                echo "$radio is disabled!"
        fi
}

setup_proxy_binding(){
        local proxypath="$1""."
        local realpath="$2""."
        ubus call ProxyManager register "{'proxy' : '$proxypath','real' : '$realpath'}"
        return $?
}

####################
# main
####################

status_function() {
        # load the wireless config and show the disabled value of each radio
        config_load wireless
        config_foreach show_wireless_radio_disabled wifi-device

        echo "enable: $(uci get prplmesh.config.enable)"
        echo "management_mode: $(uci get prplmesh.config.management_mode)"
        echo "operating_mode: $(uci get prplmesh.config.operating_mode)"
        wlan_ready && echo "WLAN Ready" || echo "WLAN not ready"
        /opt/prplmesh/scripts/prplmesh_utils.sh status
}

start_function() {
        enable=`uci -q get prplmesh.config.enable`
        if [ -n "$enable" -a "$enable" = "1" ]; then
                wlan_ready_poll || {
                        logger -t "${NAME}" -p daemon.warn "Timeout waiting for WLAN ready!"
                        exit 1
                }
                if [ "$(uci get prplmesh.config.operating_mode)" = "Gateway" ]; then
                        logger -t "${NAME}" -p daemon.info "Start prplMesh controller & agent"
                        /opt/prplmesh/scripts/prplmesh_utils.sh start
                else
                        logger -t "${NAME}" -p daemon.info "Start prplMesh agent"
                        /opt/prplmesh/scripts/prplmesh_utils.sh start -m A
                fi
                if [ "$DEFAULT_CONTROLLER_ROOT_DM" != "$CONFIG_CONTROLLER_ROOT_DM" ]; then
                        setup_proxy_binding $DEFAULT_CONTROLLER_ROOT_DM $CONFIG_CONTROLLER_ROOT_DM || \
                                logger -t "${NAME}" -p daemon.warn "Can't create a proxy binding for $DEFAULT_CONTROLLER_ROOT_DM using $CONFIG_CONTROLLER_ROOT_DM."
                fi
        else
                logger -t "${NAME}" -p daemon.warn "prplMesh is disabled (prplmesh.config.enable=0), skipping..."
                exit 0
        fi
}

stop_function() {
        logger -t "${NAME}" -p daemon.info "Stop prplMesh"
        /opt/prplmesh/scripts/prplmesh_utils.sh stop
        # since prplmesh changes the wifi runtime configuration,
        # restart wifi when stopping prplmesh
        #wlan_reset
}

enable_function() {
        logger -t "${NAME}" -p daemon.info "Enable prplMesh (reboot required)"
        uci set prplmesh.config.enable=1
        uci commit prplmesh
}

disable_function() {
        logger -t "${NAME}" -p daemon.info "Disable prplMesh (reboot required)"
        uci set prplmesh.config.enable=0
        uci commit prplmesh
}

start() {
        start_function
}

stop() {
        stop_function
}

restart() {
        stop_function
        start_function
}

status() {
        status_function
}

__uci_set_repeater_mode__() {
        uci set prplmesh.config.management_mode='Multi-AP-Agent'
        uci set prplmesh.config.operating_mode='WDS-Repeater'
        uci set prplmesh.config.wired_backhaul=1
        uci set prplmesh.config.master=0
        uci set prplmesh.config.gateway=0
        uci commit prplmesh
}

repeater_mode() {
        stop
        __uci_set_repeater_mode__
        start
        echo "prplmesh repeater mode set"
}

__uci_set_gateway_mode__() {
        uci commit network
        uci set prplmesh.config.management_mode='Multi-AP-Controller-and-Agent'
        uci set prplmesh.config.operating_mode='Gateway'
        uci set prplmesh.config.wired_backhaul=0
        uci set prplmesh.config.master=1
        uci set prplmesh.config.gateway=1
        uci commit prplmesh
}

gateway_mode() {
        stop
        __uci_set_gateway_mode__
        start
        echo "prplmesh gateway mode set"
}

__uci_set_certification_mode__() {
        uci set prplmesh.config.certification_mode=1
        uci commit prplmesh
}

certification_mode() {
        mode=${1-controller}

        stop
        case "$mode" in
        controller | gateway)
                __uci_set_gateway_mode__
                __uci_set_certification_mode__
                ;;
        agent | repeater)
                __uci_set_repeater_mode__
                __uci_set_certification_mode__
                ;;
        esac
        start
}

EXTRA_COMMANDS="status repeater_mode gateway_mode certification_mode"
EXTRA_HELP='''
	status                    show service status
        certification_mode <mode> set certification controller mode
	repeater_mode             set repeater mode
	gateway_mode              set gateway mode
'''

